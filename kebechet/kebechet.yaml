---
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: thamos-advise
  annotations:
    thoth-station.ninja/template-version: 0.1.1
  labels:
    app: thoth
    component: thamos-advise
spec:
  templates:
    - name: thamos-advise
      inputs:
        parameters:
          - name: "GITHUB_EVENT_TYPE"
          - name: "GITHUB_CHECK_RUN_ID"
          - name: "GITHUB_INSTALLATION_ID"
          - name: "GITHUB_BASE_REPO_URL"
          - name: "GITHUB_HEAD_REPO_URL"
          - name: "ORIGIN"
          - name: "REVISION"
          - name: "THOTH_HOST"
        artifacts:
          - name: repository
            path: /mnt/inputs/artifacts/repository
            git:
              repo: "{{inputs.parameters.GITHUB_HEAD_REPO_URL}}"
              revision: "{{inputs.parameters.REVISION}}"
              depth: 1
      script:
        command:
          - python3
        name: thamos-advise
        image: "quay.io/pacospace/thamos:v0.9.2-dev"
        source: |
          import os
          import json
          import yaml
          import logging
          from pathlib import Path
          from thamos.lib import advise_here
          from thamos.config import config
          _LOGGER = logging.getLogger("thoth.qebhwt")
          os.chdir("/mnt/inputs/artifacts/repository")
          config.explicit_host = "{{inputs.parameters.THOTH_HOST}}"
          config.tls_verify = True
          artifact_path = Path.cwd()
          thoth_conf_file_path = artifact_path.joinpath(".thoth.yaml")
          thoth_yaml = {}
          if thoth_conf_file_path.exists():
            with open(thoth_conf_file_path, 'r') as yaml_file:
              thoth_yaml = yaml.safe_load(yaml_file)
          else:
            thoth_yaml = {
                'host': '{{inputs.parameters.THOTH_HOST}}',
                'tls_verify': 'false',
                'requirements_format': 'pipenv',
                'runtime_environments':[
                  {
                    'name':'fedora:31',
                    'operating_system':{
                        'name': 'fedora',
                        'version': '31',
                    },
                    'python_version': '3.6',
                    'recommendation_type':'latest'
                }
              ]
            }
            with open('.thoth.yaml', 'w') as yaml_file:
                yaml.dump(thoth_yaml, yaml_file, default_flow_style=False)
          try:
            analysis_id = advise_here(
              recommendation_type=thoth_yaml['runtime_environments'][0]['recommendation_type'],
              runtime_environment=thoth_yaml['runtime_environments'][0],
              nowait=True,
              github_event_type="{{inputs.parameters.GITHUB_EVENT_TYPE}}",
              github_check_run_id="{{inputs.parameters.GITHUB_CHECK_RUN_ID}}",
              github_installation_id="{{inputs.parameters.GITHUB_INSTALLATION_ID}}",
              github_base_repo_url="{{inputs.parameters.GITHUB_BASE_REPO_URL}}",
              origin="{{inputs.parameters.ORIGIN}}"
            )
          except Exception as exception:
            if isinstance(exception, FileNotFoundError):
              _LOGGER.debug(exception)
              exception = str(exception)
            else:
              _LOGGER.debug(json.loads(exception.body)['error'])
              exception = json.loads(exception.body)['error']
            import hmac
            import requests
            import uuid
            payload = {}
            payload["analysis_id"] = ""
            payload["exception"] = exception
            installation_id = {}
            installation_id["id"] = "{{inputs.parameters.GITHUB_INSTALLATION_ID}}"
            data = {
                "action": "finished",
                "check_run_id": "{{inputs.parameters.GITHUB_CHECK_RUN_ID}}",
                "installation": installation_id,
                "base_repo_url": "{{inputs.parameters.GITHUB_BASE_REPO_URL}}",
                "payload": payload
            }
            key=os.environ["WEBHOOK_SECRET"]
            msg = json.dumps(data).encode("UTF-8")
            secret = key.encode("UTF-8")
            signature = hmac.new(secret, msg, digestmod="sha1")
            headers = {
                "Accept": "application/vnd.github.antiope-preview+json",
                "Content-Type": "application/json",
                "User-Agent": "Workflow/adviser-00000000",
                "X-GitHub-Delivery": str(uuid.uuid4()),
                "X-GitHub-Event": "{{inputs.parameters.GITHUB_EVENT_TYPE}}",
                "X-Hub-Signature": f"sha1={signature.hexdigest()}",
            }
            print("Headers:\n", headers)
            print("Data:\n", data)
            WEBHOOK_CALLBACK_URL = os.environ["WEBHOOK_CALLBACK_URL"]
            response = requests.post(WEBHOOK_CALLBACK_URL, data=json.dumps(data), headers=headers)
            response.raise_for_status()
        env:
          - name: "WEBHOOK_CALLBACK_URL"
            value: "http://qeb-hwt-aicoe-prod-bots.cloud.paas.psi.redhat.com"
          - name: WEBHOOK_SECRET
            valueFrom:
              secretKeyRef:
                key: WEBHOOK_SECRET
                name: qeb-hwt-github-app
        resources:
          limits:
            cpu: 1
            memory: 2Gi
          requests:
            cpu: 1
            memory: 2Gi